/*
 * Planted Organic Movement System
 * Natural, flowing animations that feel alive and purposeful
 */

/* ========================================
   EASING FUNCTIONS
   Custom cubic-bezier curves for organic movement
   ======================================== */

:root {
  /* Planted signature easing */
  --ease-planted: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-planted-in: cubic-bezier(0.4, 0, 1, 1);  
  --ease-planted-out: cubic-bezier(0, 0, 0.2, 1);
  
  /* Natural movement easing */
  --ease-natural: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --ease-organic: cubic-bezier(0.23, 1, 0.32, 1);
  --ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  --ease-spring: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  
  /* Breathing animations */
  --ease-breathe: cubic-bezier(0.37, 0, 0.63, 1);
  --ease-heartbeat: cubic-bezier(0.25, 0.25, 0.75, 0.75);
}

/* ========================================
   ENTRANCE ANIMATIONS
   Elements appearing with organic motion
   ======================================== */

/* Fade up from below */
@keyframes fade-up {
  from {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.animate-fade-up {
  animation: fade-up 0.8s var(--ease-organic) both;
}

/* Fade in from left */
@keyframes fade-left {
  from {
    opacity: 0;
    transform: translateX(-30px) rotate(-1deg);
  }
  to {
    opacity: 1;
    transform: translateX(0) rotate(0deg);
  }
}

.animate-fade-left {
  animation: fade-left 0.8s var(--ease-organic) both;
}

/* Fade in from right */
@keyframes fade-right {
  from {
    opacity: 0;
    transform: translateX(30px) rotate(1deg);
  }
  to {
    opacity: 1;
    transform: translateX(0) rotate(0deg);
  }
}

.animate-fade-right {
  animation: fade-right 0.8s var(--ease-organic) both;
}

/* Scale in with bounce */
@keyframes scale-in {
  from {
    opacity: 0;
    transform: scale(0.8) rotate(-2deg);
  }
  to {
    opacity: 1;
    transform: scale(1) rotate(0deg);
  }
}

.animate-scale-in {
  animation: scale-in 0.6s var(--ease-bounce) both;
}

/* ========================================
   STAGGERED ANIMATIONS
   Sequential reveals with organic timing
   ======================================== */

.animate-stagger-children > * {
  animation: fade-up 0.8s var(--ease-organic) both;
}

.animate-stagger-children > *:nth-child(1) { animation-delay: 0ms; }
.animate-stagger-children > *:nth-child(2) { animation-delay: 100ms; }
.animate-stagger-children > *:nth-child(3) { animation-delay: 200ms; }
.animate-stagger-children > *:nth-child(4) { animation-delay: 300ms; }
.animate-stagger-children > *:nth-child(5) { animation-delay: 400ms; }
.animate-stagger-children > *:nth-child(6) { animation-delay: 500ms; }
.animate-stagger-children > *:nth-child(7) { animation-delay: 600ms; }
.animate-stagger-children > *:nth-child(8) { animation-delay: 700ms; }

/* Faster stagger for smaller elements */
.animate-stagger-fast > * {
  animation: fade-up 0.6s var(--ease-organic) both;
}

.animate-stagger-fast > *:nth-child(1) { animation-delay: 0ms; }
.animate-stagger-fast > *:nth-child(2) { animation-delay: 50ms; }
.animate-stagger-fast > *:nth-child(3) { animation-delay: 100ms; }
.animate-stagger-fast > *:nth-child(4) { animation-delay: 150ms; }
.animate-stagger-fast > *:nth-child(5) { animation-delay: 200ms; }
.animate-stagger-fast > *:nth-child(6) { animation-delay: 250ms; }

/* ========================================
   HOVER ANIMATIONS
   Interactive movement that feels natural
   ======================================== */

/* Gentle lift on hover */
.hover-lift {
  transition: transform var(--duration-planted) var(--ease-organic);
}

.hover-lift:hover {
  transform: translateY(-8px) rotate(0.5deg);
}

/* Scale with slight rotation */
.hover-scale {
  transition: transform var(--duration-planted) var(--ease-organic);
}

.hover-scale:hover {
  transform: scale(1.05) rotate(-0.5deg);
}

/* Gentle bounce */
.hover-bounce {
  transition: transform var(--duration-planted) var(--ease-spring);
}

.hover-bounce:hover {
  transform: translateY(-5px) scale(1.02);
}

/* Tilt effect */
.hover-tilt {
  transition: transform var(--duration-planted) var(--ease-organic);
  transform-style: preserve-3d;
}

.hover-tilt:hover {
  transform: perspective(1000px) rotateX(5deg) rotateY(5deg) translateY(-5px);
}

/* ========================================
   BREATHING ANIMATIONS
   Subtle ambient movement for living feel
   ======================================== */

/* Gentle breathing */
@keyframes breathe {
  0%, 100% {
    transform: scale(1) rotate(0deg);
  }
  50% {
    transform: scale(1.02) rotate(0.2deg);
  }
}

.animate-breathe {
  animation: breathe 4s var(--ease-breathe) infinite;
}

/* Heartbeat pulse */
@keyframes heartbeat {
  0%, 100% {
    transform: scale(1);
  }
  14% {
    transform: scale(1.05);
  }
  28% {
    transform: scale(1);
  }
  42% {
    transform: scale(1.05);
  }
  70% {
    transform: scale(1);
  }
}

.animate-heartbeat {
  animation: heartbeat 2s var(--ease-heartbeat) infinite;
}

/* Gentle sway */
@keyframes sway {
  0%, 100% {
    transform: rotate(0deg) translateX(0);
  }
  25% {
    transform: rotate(0.5deg) translateX(2px);
  }
  75% {
    transform: rotate(-0.5deg) translateX(-2px);
  }
}

.animate-sway {
  animation: sway 6s var(--ease-natural) infinite;
}

/* ========================================
   SCROLL ANIMATIONS
   Movement triggered by scroll position
   ======================================== */

/* Parallax movement */
.parallax-slow {
  transform: translateY(var(--scroll-y, 0));
  transition: transform 0.1s linear;
}

.parallax-medium {
  transform: translateY(calc(var(--scroll-y, 0) * 0.5));
  transition: transform 0.1s linear;
}

.parallax-fast {
  transform: translateY(calc(var(--scroll-y, 0) * 0.8));
  transition: transform 0.1s linear;
}

/* Scale on scroll */
.scale-on-scroll {
  transform: scale(calc(1 + var(--scroll-progress, 0) * 0.1));
  transition: transform 0.1s linear;
}

/* Rotate on scroll */
.rotate-on-scroll {
  transform: rotate(calc(var(--scroll-progress, 0) * 10deg));
  transition: transform 0.1s linear;
}

/* ========================================
   NUMBER COUNTER ANIMATIONS
   Smooth counting with organic easing
   ======================================== */

@keyframes counter-up {
  from {
    opacity: 0;
    transform: translateY(20px) scale(0.8);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.animate-counter {
  animation: counter-up 1.5s var(--ease-organic) both;
}

/* Individual digit animation */
.counter-digit {
  display: inline-block;
  transition: transform 0.3s var(--ease-organic);
}

.counter-digit.changing {
  transform: translateY(-10px) scale(1.1);
}

/* ========================================
   FORM ANIMATIONS
   Interactive feedback for form elements
   ======================================== */

/* Focus animation */
.form-element {
  transition: all var(--duration-planted) var(--ease-organic);
  position: relative;
}

.form-element:focus {
  transform: scale(1.02) translateY(-1px);
  box-shadow: 0 8px 25px rgba(0, 210, 122, 0.15);
}

/* Label float animation */
.floating-label {
  transition: all var(--duration-planted) var(--ease-organic);
  transform-origin: left top;
}

.floating-label.float {
  transform: translateY(-1.5rem) scale(0.85) rotate(-0.5deg);
  color: var(--color-accent);
}

/* Success animation */
@keyframes success-bounce {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05) rotate(1deg);
  }
  100% {
    transform: scale(1) rotate(0deg);
  }
}

.animate-success {
  animation: success-bounce 0.6s var(--ease-bounce);
}

/* ========================================
   LOADING ANIMATIONS
   Organic loading states
   ======================================== */

/* Organic spinner */
@keyframes organic-spin {
  0% {
    transform: rotate(0deg) scale(1);
  }
  25% {
    transform: rotate(90deg) scale(0.95);
  }
  50% {
    transform: rotate(180deg) scale(1);
  }
  75% {
    transform: rotate(270deg) scale(1.05);
  }
  100% {
    transform: rotate(360deg) scale(1);
  }
}

.animate-organic-spin {
  animation: organic-spin 2s var(--ease-organic) infinite;
}

/* Pulsing dots */
@keyframes pulse-dots {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1.2);
    opacity: 1;
  }
}

.loading-dots span {
  display: inline-block;
  animation: pulse-dots 1.4s infinite ease-in-out both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }
.loading-dots span:nth-child(3) { animation-delay: 0s; }

/* ========================================
   TOAST ANIMATIONS
   Notifications with organic entrance/exit
   ======================================== */

@keyframes toast-slide-in {
  from {
    transform: translateX(100%) rotate(5deg);
    opacity: 0;
  }
  to {
    transform: translateX(0) rotate(0deg);
    opacity: 1;
  }
}

@keyframes toast-slide-out {
  from {
    transform: translateX(0) rotate(0deg);
    opacity: 1;
  }
  to {
    transform: translateX(100%) rotate(-5deg);
    opacity: 0;
  }
}

.toast-enter {
  animation: toast-slide-in 0.5s var(--ease-organic);
}

.toast-exit {
  animation: toast-slide-out 0.3s var(--ease-organic);
}

/* ========================================
   MODAL ANIMATIONS
   Organic modal entrance and backdrop
   ======================================== */

@keyframes modal-backdrop-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes modal-content-in {
  from {
    opacity: 0;
    transform: scale(0.9) translateY(30px) rotate(-1deg);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0) rotate(0deg);
  }
}

.modal-backdrop {
  animation: modal-backdrop-in 0.3s ease;
}

.modal-content {
  animation: modal-content-in 0.5s var(--ease-organic);
}

/* ========================================
   UTILITY CLASSES
   Quick animation utilities
   ======================================== */

/* Animation delays */
.delay-100 { animation-delay: 100ms; }
.delay-200 { animation-delay: 200ms; }
.delay-300 { animation-delay: 300ms; }
.delay-500 { animation-delay: 500ms; }
.delay-700 { animation-delay: 700ms; }
.delay-1000 { animation-delay: 1000ms; }

/* Animation durations */
.duration-fast { animation-duration: 0.3s; }
.duration-normal { animation-duration: 0.5s; }
.duration-slow { animation-duration: 0.8s; }
.duration-slower { animation-duration: 1.2s; }

/* Animation fill modes */
.fill-both { animation-fill-mode: both; }
.fill-forwards { animation-fill-mode: forwards; }
.fill-backwards { animation-fill-mode: backwards; }

/* ========================================
   REDUCED MOTION SUPPORT
   Respect user preferences
   ======================================== */

@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }

  .animate-breathe,
  .animate-heartbeat,
  .animate-sway,
  .animate-organic-spin {
    animation: none;
  }
  
  .hover-lift:hover,
  .hover-scale:hover,
  .hover-bounce:hover,
  .hover-tilt:hover {
    transform: none;
  }
}

/* ========================================
   PERFORMANCE OPTIMIZATIONS
   Hardware acceleration and efficient animations
   ======================================== */

.animate-optimized {
  will-change: transform, opacity;
  backface-visibility: hidden;
  perspective: 1000px;
}

/* GPU acceleration for transform animations */
.gpu-accelerated {
  transform: translate3d(0, 0, 0);
}

/* Smooth animations */
.smooth-animation {
  animation-timing-function: var(--ease-organic);
  transform: translateZ(0);
}